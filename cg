#!/bin/bash

# Class Generator (cg)
# automates generating c++ class and header files and fills them with boilerplate code


# todo - clean up a lot, add functions, get options working


hExtension="h"
cExtension="cpp"

dir=""
namespace=""


# sets name to the first argument passed in
input=$1

# converts the input into an 'array' of words seperated by spaces so the last word can be grabbed
name=$(echo "$input" | sed 's/::/ /g')

# sets the name to the last word in the list
name="${name##* }"

# exits the program early if no name is provided
if [ -z "$name" ]; then
    echo "No class name entered"
    exit 1
fi

# options analysis
# todo - fix because this is very unreliable
while getopts 'h:c:n:d:' OPTION; do
    case "$OPTION" in
        h) hExtension=$OPTARG
            echo "hExtension: $hExtension"
            ;;
        c) cExtension=$OPTARG;;
        n) namespace=$OPTARG;;
        d) dir=$OPTARG;;
        ?) echo "Usage: $0 [-h <hExtension>] [-c <cExtension>] [-n <namespace>] [-d <directory>]"
            exit 1
            ;;
    esac
done
shift $(($OPTIND -1))

# add to the end of the string so that substitutions only effect the end of the string. 
# note, this will not work if someone puts the contents of end_of_input in the input string.
# however, the odds of doing this unintentionally are incredibly low.
end_of_input="lmao_no_one_will_add_this_to_a_namespace"

# deletes a string at the end of another string. input 1 is the string to delete from, 
# input 2 is the string to delete. If the string to delete is not at the end of the string, nothing
# happens. Results are returned using echo.
function delete_at_end() {
    target=$1
    to_delete=$2
    target=$target$end_of_input
    temp=$(echo $target | sed "s/$to_delete$end_of_input//")
    # remove end of input marker as well
    echo $temp | sed "s/$end_of_input//"
}

# if namespace isn't explicitly stated, set it to everything before the name
if [ -z "$namespace" ]; then
    namespace=$input

    # erase the class name from the end of the namespace
    namespace=$(delete_at_end $namespace $name)

    # erase the :: from the end of the namespace
    namespace=$(delete_at_end $namespace ::)
fi

# the header guard definition
hGuardDef=""
# if there is a namespace, this is where it's declared. If not, this is kept empty.
namespaceDeclaration=""
# ending } of the namespace if there is one.
namespaceEnd=""
# indents the class declaration, but only if there is a namespace for the class to be nested in
indent=""

# if the namespace isn't empty...
if [ -n "$namespace" ]; then
    # define the class as being within the namespace
    namespaceDeclaration="namespace $namespace {"
    namespaceEnd="}"

    # prefix the header guard with the namespace with _ instead of ::. 
    # the string is capitalized later, so case does not matter.
    hGuardDef=$(printf $namespace | sed 's/::/_/g')_
    # if there is a namespace to add, add an indent for the class. If there is not, this is left
    # blank, meaning the class isn't indented.
    indent="\t"

    # sets the directory to the namespace, but only if it hasn't already been specified
    if [ -z $dir ]; then
        dir=$(printf $namespace | sed 's/::/\//g')/
    fi
fi

# sets the name of the header guard definition to the name of the class in uppercase
hGuardDef="$(echo $hGuardDef$name | tr '[:lower:]' '[:upper:]')_H"

# header boiler plate text
hText="#ifndef $hGuardDef // begin header guard
#define $hGuardDef

$namespaceDeclaration
$indent
${indent}class $name {
$indent
${indent}};

$namespaceEnd

#endif // end of header guard" 

# adds a simple include for the header file just created
cText="#include \"$name.$hExtension\""

# creates a directory where the namespace is
if [ -n "$dir" ]; then
    mkdir -p $dir
fi

printf "$hText" > $dir$name.$hExtension
printf "$cText" > $dir$name.$cExtension
